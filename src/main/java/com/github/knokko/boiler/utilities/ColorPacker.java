package com.github.knokko.boiler.utilities;

/**
 * Helper class to pack RGB(A) colors into a single <b>int</b>. This is similar to what <i>java.awt.Color</i> does,
 * but the component order is different. The  advantage of this class over <i>java.awt.Color</i>,
 * is that no objects need to be allocated, you don't need to ship <i>java.desktop</i>,
 * and you don't risk triggering AWT on macOS, which could sabotage GLFW.
 */
public class ColorPacker {

	/**
	 * Packs red, green, blue, and alpha into an integer. The red component will be stored in the least-significant
	 * 8 bits, the green component will be stored in the next 8 bits, etc...
	 */
	public static int rgba(byte red, byte green, byte blue, byte alpha) {
		return unsigned(red) | (unsigned(green) << 8) | (unsigned(blue) << 16) | (unsigned(alpha) << 24);
	}

	/**
	 * Packs red, green, blue, and alpha into an integer. The red component will be stored in the least-significant
	 * 8 bits, the green component will be stored in the next 8 bits, etc...<br>
	 *
	 * You can give the parameters either in the range [-128, 127] or [0, 255].
	 */
	public static int rgba(int red, int green, int blue, int alpha) {
		return rgba((byte) red, (byte) green, (byte) blue, (byte) alpha);
	}

	/**
	 * Packs red, green, and blue into an integer. The red component will be stored in the least-significant
	 * 8 bits, the green component will be stored in the next 8 bits, and the blue component will be stored next to
	 * green. The 8 most-significant bits will be set to 1, making the stored color opaque.
	 */
	public static int rgb(byte red, byte green, byte blue) {
		return rgba(red, green, blue, (byte) 255);
	}

	/**
	 * Packs red, green, and blue into an integer. The red component will be stored in the least-significant
	 * 8 bits, the green component will be stored in the next 8 bits, and the blue component will be stored next to
	 * green. The 8 most-significant bits will be set to 1, making the stored color opaque.<br>
	 *
	 * You can give the parameters either in the range [-128, 127] or [0, 255].
	 */
	public static int rgb(int red, int green, int blue) {
		return rgba(red, green, blue, 255);
	}

	/**
	 * Extracts the red component from a rgba value generated by the <i>rgba</i> method
	 */
	public static byte red(int rgba) {
		return (byte) rgba;
	}

	/**
	 * Extracts the green component from a rgba value generated by the <i>rgba</i> method
	 */
	public static byte green(int rgba) {
		return (byte) (rgba >> 8);
	}

	/**
	 * Extracts the blue component from a rgba value generated by the <i>rgba</i> method
	 */
	public static byte blue(int rgba) {
		return (byte) (rgba >> 16);
	}

	/**
	 * Extracts the alpha component from a rgba value generated by the <i>rgba</i> method
	 */
	public static byte alpha(int rgba) {
		return (byte) (rgba >> 24);
	}

	/**
	 * Converts a <b>byte</b> (in the range [-128, 127]) to an <b>int</b> in the range [0, 255]
	 */
	public static int unsigned(byte value) {
		return value & 0xFF;
	}
}
